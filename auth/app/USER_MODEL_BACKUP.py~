class User(db.Model):
	__tablename__ = 'users'
	id = db.Column(db.Integer, primary_key=True)
	__email = db.Column('email', db.String(UserConfig.MAX_PASSW_LEN), unique=True)
	__password = db.Column('password', db.String(128))
	__role_id = db.Column('', db.Integer, db.ForeignKey('roles.id'))

	def __init__(self, email, passw, role):
		if None in (email, passw, role):
			raise UException('Incorrect parameters')
		if not re.match(r'[^@]+@[^@]+\.[^@]+', email):
			raise UException('Incorrect email format')
		self.__email = email
		if len(passw) < UserConfig.MIN_PASSW_LEN or len(passw) > UserConfig.MAX_PASSW_LEN:
			raise UException('Incorrect password length (minimal length = %d, maximal length = %d)'%(UserConfig.MIN_PASSW_LEN, UserConfig.MAX_PASSW_LEN))
		self.__password = generate_password_hash(passw)
		role_id = Role.query.filter_by(name=role).first()
		if role_id is None:
			raise UException('Incorrect role name')
		self.__role_id = role_id.id

	@property
	def password(self):
		raise AttributeError('password is not a readable attribute')

	@property
	def email(self):
		return self.__email

	@property
	def role_id(self):
		return self.__role_id

	@email.setter
	def email(self, e):
		if not validate_email(e):
			raise ValueError('Incorrect email format')
		self.__email = e

	@password.setter
	def password(self, passw_text):
		if len(passw_text) < UserConfig.MIN_PASSW_LEN or len(passw_text) > UserConfig.MAX_PASSW_LEN:
			raise ValueError('Incorrect password length (minimal length = %d, maximal length = %d)'%(UserConfig.MIN_PASSW_LEN, UserConfig.MAX_PASSW_LEN))
		self.__password = generate_password_hash(passw_text)

	def verify_password(self, password):
		return check_password_hash(self.__password, password)

	def __repr__(self):
		return '<User: email: %s, phash: %s, role_id: %d' % (self.__email, self.__password, self.__role_id)

