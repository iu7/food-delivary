from datetime import datetime
from flask import render_template, session, redirect, url_for, request, make_response
from . import main
import requests
from flask import current_app, abort
from forms import ClientRegisterForm, RestaurantRegisterForm,\
		AddressForm, ClientEditForm, UserPasswordEditForm
import furls

@main.route('/about', methods=['GET'])
def about():
	response = render_template('about.html')
	session_id = request.cookies.get('session_id')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			session_id = result['session_id']
			if result['role'] == 'Client':
				flag, result = furls.client_info(result['user_id'])
				if flag:
					response = make_response(render_template('about.html', user=result))
					response.set_cookie('session_id', session_id)
	return response

#TODO ADMIN + RESTR
@main.route('/', methods=['GET'])
def index():
	response = render_template('home.html')
	session_id = request.cookies.get('session_id')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			session_id = result['session_id']
			if result['role'] == 'Client':
				flag, result = furls.client_info(result['user_id'])
				if flag:
					response = make_response(render_template('home.html', user=result))
					response.set_cookie('session_id', session_id)
				else: print result
			'''elif result['role'] == 'Manager':
				response = 'Manager'
			else: response = 'Administrator'''			
	return response

@main.route('/register', methods=['GET'])
def register():
	response = render_template('register.html')
	return response


@main.route('/client/register', methods=['GET', 'POST'])
def client_register():
	form = ClientRegisterForm()
	if form.validate_on_submit():
		flag, result = furls.client_register(data=form.data)
		if flag:
			response = render_template('home.html')
		else:
			error_message = result['message']
			response = render_template('client_register.html', error_message=error_message, form=form)
			#response = render_template('500.html')
	else: response = render_template('client_register.html', form=form)
	return response


#TODO ADMIN + RESTR
@main.route('/login', methods=['POST'])
def login():
	email = request.form.get('email')
	password = request.form.get('password')
	if email is None or password is None or email == '' or password == '':
		return make_response(render_template('home.html', signin_failure=True))
	if email is not None and password is not None and email != '' and password != '':
		flag, result = furls.auth_login(email=email, password=password)
		if flag:
			session_id = result['session_id']
			if result['role'] == 'Client':
				flag, result = furls.client_info(result['user_id'])
				#print 'THIS',result
				#response = make_response(render_template('client_profile.html', user=result))
				response = redirect(url_for('main.user_profile', name=result['name']))
			else: response = '#TODO restaurant and administartor'
			response.set_cookie('session_id', session_id)
		else:
			response = make_response(render_template('home.html', signin_failure=True))
	else:
		response = render_template('home.html')
	return response


@main.route('/logout')
def logout():
	session_id = request.cookies.get('session_id')
	if not session_id:
		code = 500
	else:
		flag, result = furls.auth_logout(session_id)
		code = 200
	response = make_response(render_template('home.html'))
	return response, code



@main.route('/user/<name>/profile')
def user_profile(name):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			if result['role'] == 'Client':
				flag, uresult = furls.client_info(result['user_id'])
				if flag:
					response = make_response(render_template('client_profile.html', user=uresult))
					response.set_cookie(result['session_id'])
					#flag, cresult = furls.client_address_list(result['user_id'])
					#if flag: 
					#address_list = cresult['address_list']
					#print address_list	
	return response

@main.route('/user/<name>/profile/data/edit', methods=['GET','POST'])
def user_data_edit(name):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	result_message = request.args.get('result_message')
	error_message = request.args.get('error_message')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			form = ClientEditForm()
			if form.validate_on_submit():
				user_id = result['user_id']
				email = request.form.get('email')
				new_name = request.form.get('name')
				telephone = request.form.get('telephone')
				flag, cresult = furls.client_data_update(user_id, email, new_name, telephone)
				if flag:
					response = redirect(url_for('main.user_data_edit', name=new_name, result_message='Updated!'))
				else:
					response = redirect(url_for('main.user_data_edit', name=name, error_message=cresult['message']))
			else:
				flag, uresult = furls.client_info(result['user_id'])
				response = make_response(render_template('client_data_edit.html', \
						user=uresult, form=form, result_message=result_message, error_message=error_message))
				response.set_cookie(result['session_id'])
	return response

@main.route('/user/<name>/profile/password/change', methods=['POST', 'GET'])
def user_password_change(name):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	result_message = request.args.get('result_message')
	error_message = request.args.get('error_message')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			form = UserPasswordEditForm()
			if form.validate_on_submit():
				user_id = result['user_id']
				password = request.form.get('password')
				new_password = request.form.get('new_password')
				flag, cresult = furls.auth_upassw_update(user_id, password, new_password)
				if flag:
					response = redirect(url_for('main.user_password_change', name=name, result_message='Changed!'))
				else:
					response = redirect(url_for('main.user_password_change', name=name, error_message=cresult['message']))
			else:
				flag, uresult = furls.client_info(result['user_id'])
				response = make_response(render_template('user_passw_edit.html', user=uresult,\
						form=form, result_message=result_message, error_message=error_message))
				response.set_cookie(result['session_id'])
	return response


@main.route('/client/<name>/address/list')
def client_address_list(name):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	result_message = request.args.get('result_message')
	error_message = request.args.get('error_message')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			if result['role'] == 'Client':
				flag, cresult = furls.client_address_list(result['user_id'])
				if flag:
					flag, uresult = furls.client_info(result['user_id'])
					address_list=cresult['address_list']
					can_add = (len(address_list) < 5)
					response = make_response(render_template('addresses.html', \
						user=uresult, address_list=address_list, can_add=can_add,\
						error_message=error_message, result_message=result_message))
					response.set_cookie('session_id', result['session_id'])	
	return response



@main.route('/client/<name>/address/create', methods=['GET', 'POST'])
def client_address_create(name):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	result_message = request.args.get('result_message')
	error_message = request.args.get('error_message')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			flag, uresult = furls.client_info(result['user_id'])
			form = AddressForm()
			flag, restr_result = furls.restaurant_get_cities()
			addresses = [(addr, addr) for addr in restr_result['cities_list']]
			form.city.choices = addresses
			if form.validate_on_submit():
				user_id = result['user_id']
				city = request.form.get('city')
				street = request.form.get('street')
				station = request.form.get('station')
				entrance = request.form.get('entrance')
				floor = request.form.get('floor')
				passcode = request.form.get('passcode')
				flag, aresult = furls.client_address_create(user_id, city, street, station, entrance, passcode, floor)
				if flag:				
					response = redirect(url_for('main.client_address_list', name=name, \
							result_message='Address created!'))
				else:
					response = redirect(url_for('main.client_address_list', name=name, \
							error_message=aresult['message']))
			else:	
				response = make_response(render_template('address_create.html',\
					form=form, user=uresult,name=name))
			response.set_cookie('session_id', result['session_id'])
	return response

@main.route('/client/<name>/address/<int:address_id>/delete')
def client_address_delete(name, address_id):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	result_message = request.args.get('result_message')
	error_message = request.args.get('error_message')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			flag, aresult = furls.client_address_delete(address_id)
			if flag:
				response = redirect(url_for('main.client_address_list',
					name=name, result_message='Address deleted!'))
			else:
				response = redirect(url_for('main.client_address_list', \
					name=name, error_message=aresult['message']))
			response.set_cookie('session_id', result['session_id'])
	return response


@main.route('/client/<name>/address/<int:address_id>/update', methods=['POST', 'GET'])
def client_address_update(name, address_id):
	response = render_template('404.html')
	session_id = request.cookies.get('session_id')
	result_message = request.args.get('result_message')
	error_message = request.args.get('error_message')
	if session_id:
		flag, result = furls.auth_session_state(session_id)
		if flag:
			flag, uresult = furls.client_info(result['user_id'])
			form = AddressForm()
			flag, restr_result = furls.restaurant_get_cities()
			form.city.choices = [(addr, addr) for addr in restr_result['cities_list']]
			if form.validate_on_submit():	
				city = request.form.get('city')
				street = request.form.get('street')
				station = request.form.get('station')
				entrance = request.form.get('entrance')
				floor = request.form.get('floor')
				passcode = request.form.get('passcode')	
				flag, restr_result = furls.client_address_update(address_id, city,\
					street, station, entrance, passcode, floor)
				if flag:
					response = redirect(url_for('main.client_address_list',\
						name=name, address_id=address_id,result_message='Updated!'))
				else:
					response = redirect(url_for('main.client_address_list',\
						name=name, address_id=address_id,error_message=restr_result['message']))
			else:
				city = request.args.get('city')
				street = request.args.get('street')
				station = request.args.get('station')
				entrance = request.args.get('entrance')
				floor = request.args.get('floor')
				passcode = request.args.get('passcode')
				response = make_response(render_template('addresses_edit.html', \
					user=uresult, form=form, city=city, street=street, station=station,\
					entrance=entrance, passcode=passcode, floor=floor, address_id=address_id))
			response.set_cookie('session_id', result['session_id'])	
	return response

# Restaurant views
@main.route('/restaurant/register', methods=['GET', 'POST'])
def restaurant_register():
	response = render_template('500.html')
	form = RestaurantRegisterForm()
	form.city.choices = session.get('cities_list')
	form.cuisines.choices = session.get('cuisine_list')
	if form.validate_on_submit():
		session.pop('cities_list', None)
		session.pop('cuisine_list', None)
		flag, result = furls.restaurant_register(form.data)
		if flag:
			response = redirect(url_for('main.index'))
		else:
			response = str(result)
	else:
		flag, cuisines_result = furls.restaurant_get_cuisines()
		if flag: flag, cities_result = furls.restaurant_get_cities()
		if flag:
			form.city.choices = [(x, x) for x in cities_result['cities_list']]
			session['cities_list'] = form.city.choices
			form.cuisines.choices = [(int(x['id']), x['title']) for x in cuisines_result['cuisine_list']]
			session['cuisine_list'] = form.cuisines.choices
			print form.cuisines.choices
			response = render_template('restaurant_register.html', form=form)
	return response

@main.route('/restaurant/<name>/profile')
def restaurant_profile():
	pass


#TODO
#RESTAURANT REGISTER TEST TEST TEST
#RESTAURANT PROFILE, REST MODELS WORKING DAYS ADD, PROFILE ETC
#CHACK UPDATE FUNCTIONS IN RESTAURANT VIEW



